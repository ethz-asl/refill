#!/usr/bin/env python
# Disable pylint filename and missing module member complaints.
# pylint: disable=C0103,E1101
""" Simple git pre-commit script for executing some linters. """

import commands
import subprocess
import imp
import re


def check_cpp_lint(repo_root, staged_files):
    """Runs Google's cpplint on all C++ files staged for commit,"""
    cpplint = imp.load_source('cpplint', repo_root + "/devtools/cpplint.py")
    for changed_file in staged_files:
        if re.search(r'\.(cc|h)$', changed_file):
            changed_file = repo_root + "/" + changed_file
            cpplint.ProcessFile(changed_file, 0)

    if cpplint._cpplint_state.error_count:  #pylint: disable=W0212
        print 'Aborting commit: cpplint is unhappy.'
        exit(cpplint._cpplint_state.error_count)  #pylint: disable=W0212


def check_modified_after_staging(staged_files):
    """Checks if one of the staged files was modified after staging."""
    _, unstaged_changes = commands.getstatusoutput('git diff --name-only')
    files_changed = unstaged_changes.split("\n")
    files_changed = filter(None, files_changed)

    staged_files_changed = 0

    for changed_file in files_changed:
        if changed_file in staged_files:
            print changed_file + " modified after staging"
            staged_files_changed = 1

    if staged_files_changed:
        print "Aborting commit: Staged files modified after staging."
        exit(1)


def check_python_lint(repo_root, staged_files):
    """Runs pylint on all python scripts staged for commit."""
    for changed_file in staged_files:
        if re.search(r'\.py$', changed_file):
            pylint_output = subprocess.check_output(
                "pylint --rcfile=" + repo_root +
                "/devtools/pylint.rc --errors-only " + repo_root + "/" +
                changed_file, stderr=None, shell=True)
            #TODO(igor): Actually process pylint_output

def main():
    """ Checks for staged files and executes cpplint on them. """
    _, output = commands.getstatusoutput('git diff --staged --name-only')
    _, repo_root = commands.getstatusoutput('git rev-parse --show-toplevel')
    staged_files = output.split("\n")

    # Do not allow commiting files that were modified after staging. This
    # avoids problems such as forgetting to stage fixes of cpplint complaints.
    check_modified_after_staging(staged_files)

    # Use Google's C++ linter to check for compliance with Google style guide.
    check_cpp_lint(repo_root, staged_files)

    # Use pylint to check for comimpliance with Tensofrflow python style guide.
    check_python_lint(repo_root, staged_files)


if __name__ == "__main__":
    main()
